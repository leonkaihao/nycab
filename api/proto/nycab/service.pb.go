// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package nycab

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetCabPickupCountRequest struct {
	DayTime    int64    `protobuf:"varint,1,opt,name=dayTime,proto3" json:"dayTime,omitempty"`
	Medallions []string `protobuf:"bytes,2,rep,name=medallions,proto3" json:"medallions,omitempty"`
}

func (m *GetCabPickupCountRequest) Reset()         { *m = GetCabPickupCountRequest{} }
func (m *GetCabPickupCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCabPickupCountRequest) ProtoMessage()    {}
func (*GetCabPickupCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *GetCabPickupCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCabPickupCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCabPickupCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCabPickupCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCabPickupCountRequest.Merge(m, src)
}
func (m *GetCabPickupCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCabPickupCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCabPickupCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCabPickupCountRequest proto.InternalMessageInfo

func (m *GetCabPickupCountRequest) GetDayTime() int64 {
	if m != nil {
		return m.DayTime
	}
	return 0
}

func (m *GetCabPickupCountRequest) GetMedallions() []string {
	if m != nil {
		return m.Medallions
	}
	return nil
}

type GetCabPickupCountResponse struct {
	DayTime int64                  `protobuf:"varint,1,opt,name=dayTime,proto3" json:"dayTime,omitempty"`
	Info    []*MedallionPickupInfo `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *GetCabPickupCountResponse) Reset()         { *m = GetCabPickupCountResponse{} }
func (m *GetCabPickupCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCabPickupCountResponse) ProtoMessage()    {}
func (*GetCabPickupCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}
func (m *GetCabPickupCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCabPickupCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCabPickupCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCabPickupCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCabPickupCountResponse.Merge(m, src)
}
func (m *GetCabPickupCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCabPickupCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCabPickupCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCabPickupCountResponse proto.InternalMessageInfo

func (m *GetCabPickupCountResponse) GetDayTime() int64 {
	if m != nil {
		return m.DayTime
	}
	return 0
}

func (m *GetCabPickupCountResponse) GetInfo() []*MedallionPickupInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCabPickupCountRequest)(nil), "nycab.GetCabPickupCountRequest")
	golang_proto.RegisterType((*GetCabPickupCountRequest)(nil), "nycab.GetCabPickupCountRequest")
	proto.RegisterType((*GetCabPickupCountResponse)(nil), "nycab.GetCabPickupCountResponse")
	golang_proto.RegisterType((*GetCabPickupCountResponse)(nil), "nycab.GetCabPickupCountResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }
func init() { golang_proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xab, 0x4c, 0x4e, 0x4c,
	0x92, 0xe2, 0x4a, 0xcf, 0x4f, 0xcf, 0x87, 0x08, 0x49, 0x71, 0xe7, 0xe6, 0xa7, 0xa4, 0xe6, 0x40,
	0x38, 0x4a, 0x21, 0x5c, 0x12, 0xee, 0xa9, 0x25, 0xce, 0x89, 0x49, 0x01, 0x99, 0xc9, 0xd9, 0xa5,
	0x05, 0xce, 0xf9, 0xa5, 0x79, 0x25, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c,
	0xec, 0x29, 0x89, 0x95, 0x21, 0x99, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30,
	0xae, 0x90, 0x1c, 0x17, 0x57, 0x6e, 0x6a, 0x4a, 0x62, 0x4e, 0x4e, 0x66, 0x7e, 0x5e, 0xb1, 0x04,
	0x93, 0x02, 0xb3, 0x06, 0x67, 0x10, 0x92, 0x88, 0x52, 0x2a, 0x97, 0x24, 0x16, 0x53, 0x8b, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0xf1, 0x18, 0xab, 0xc7, 0xc5, 0x92, 0x99, 0x97, 0x96, 0x0f, 0x36, 0x90,
	0xdb, 0x48, 0x4a, 0x0f, 0xec, 0x76, 0x3d, 0x5f, 0x98, 0xb9, 0x10, 0xc3, 0x3c, 0xf3, 0xd2, 0xf2,
	0x83, 0xc0, 0xea, 0x8c, 0x12, 0xb9, 0x58, 0xfd, 0x22, 0x9d, 0x13, 0x93, 0x84, 0x22, 0xb8, 0x84,
	0x5d, 0xf2, 0x31, 0x6c, 0x14, 0x92, 0x87, 0x9a, 0x80, 0xcb, 0x87, 0x52, 0x0a, 0xb8, 0x15, 0x40,
	0x1c, 0xeb, 0x24, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe0, 0xb1, 0x1c, 0xe3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x24, 0xb1, 0x81, 0x03, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xda, 0x7e, 0x8a, 0x3a,
	0x75, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NYCabClient is the client API for NYCab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NYCabClient interface {
	// Creates an Order
	DoGetCabPickupCount(ctx context.Context, in *GetCabPickupCountRequest, opts ...grpc.CallOption) (*GetCabPickupCountResponse, error)
}

type nYCabClient struct {
	cc *grpc.ClientConn
}

func NewNYCabClient(cc *grpc.ClientConn) NYCabClient {
	return &nYCabClient{cc}
}

func (c *nYCabClient) DoGetCabPickupCount(ctx context.Context, in *GetCabPickupCountRequest, opts ...grpc.CallOption) (*GetCabPickupCountResponse, error) {
	out := new(GetCabPickupCountResponse)
	err := c.cc.Invoke(ctx, "/nycab.NYCab/DoGetCabPickupCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NYCabServer is the server API for NYCab service.
type NYCabServer interface {
	// Creates an Order
	DoGetCabPickupCount(context.Context, *GetCabPickupCountRequest) (*GetCabPickupCountResponse, error)
}

func RegisterNYCabServer(s *grpc.Server, srv NYCabServer) {
	s.RegisterService(&_NYCab_serviceDesc, srv)
}

func _NYCab_DoGetCabPickupCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCabPickupCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NYCabServer).DoGetCabPickupCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nycab.NYCab/DoGetCabPickupCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NYCabServer).DoGetCabPickupCount(ctx, req.(*GetCabPickupCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NYCab_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nycab.NYCab",
	HandlerType: (*NYCabServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoGetCabPickupCount",
			Handler:    _NYCab_DoGetCabPickupCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *GetCabPickupCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCabPickupCountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.DayTime))
	}
	if len(m.Medallions) > 0 {
		for _, s := range m.Medallions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetCabPickupCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCabPickupCountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.DayTime))
	}
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetCabPickupCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DayTime != 0 {
		n += 1 + sovService(uint64(m.DayTime))
	}
	if len(m.Medallions) > 0 {
		for _, s := range m.Medallions {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetCabPickupCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DayTime != 0 {
		n += 1 + sovService(uint64(m.DayTime))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCabPickupCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCabPickupCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCabPickupCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTime", wireType)
			}
			m.DayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medallions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medallions = append(m.Medallions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCabPickupCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCabPickupCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCabPickupCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTime", wireType)
			}
			m.DayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &MedallionPickupInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
