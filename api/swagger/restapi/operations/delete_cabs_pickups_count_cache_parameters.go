// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteCabsPickupsCountCacheParams creates a new DeleteCabsPickupsCountCacheParams object
// no default values defined in spec.
func NewDeleteCabsPickupsCountCacheParams() DeleteCabsPickupsCountCacheParams {

	return DeleteCabsPickupsCountCacheParams{}
}

// DeleteCabsPickupsCountCacheParams contains all the bound params for the delete cabs pickups count cache operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteCabsPickupsCountCache
type DeleteCabsPickupsCountCacheParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Clear to date inclusive
	  In: query
	*/
	EndDate *strfmt.Date
	/*Clear from date inclusive
	  In: query
	*/
	StartDate *strfmt.Date
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteCabsPickupsCountCacheParams() beforehand.
func (o *DeleteCabsPickupsCountCacheParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndDate, qhkEndDate, _ := qs.GetOK("endDate")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("startDate")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *DeleteCabsPickupsCountCacheParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("endDate", "query", "strfmt.Date", raw)
	}
	o.EndDate = (value.(*strfmt.Date))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *DeleteCabsPickupsCountCacheParams) validateEndDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("endDate", "query", "date", o.EndDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *DeleteCabsPickupsCountCacheParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("startDate", "query", "strfmt.Date", raw)
	}
	o.StartDate = (value.(*strfmt.Date))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *DeleteCabsPickupsCountCacheParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate", "query", "date", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}
