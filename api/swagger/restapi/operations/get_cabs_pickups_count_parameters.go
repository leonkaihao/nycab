// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCabsPickupsCountParams creates a new GetCabsPickupsCountParams object
// with the default values initialized.
func NewGetCabsPickupsCountParams() GetCabsPickupsCountParams {

	var (
		// initialize parameters with default values

		refreshDefault = bool(false)
	)

	return GetCabsPickupsCountParams{
		Refresh: &refreshDefault,
	}
}

// GetCabsPickupsCountParams contains all the bound params for the get cabs pickups count operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCabsPickupsCount
type GetCabsPickupsCountParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Date strfmt.Date
	/*
	  Required: true
	  In: query
	*/
	Medallions []string
	/*Enforce to get latest data, NOT from cache.
	  In: query
	  Default: false
	*/
	Refresh *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCabsPickupsCountParams() beforehand.
func (o *GetCabsPickupsCountParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDate, qhkDate, _ := qs.GetOK("date")
	if err := o.bindDate(qDate, qhkDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qMedallions, qhkMedallions, _ := qs.GetOK("medallions")
	if err := o.bindMedallions(qMedallions, qhkMedallions, route.Formats); err != nil {
		res = append(res, err)
	}

	qRefresh, qhkRefresh, _ := qs.GetOK("refresh")
	if err := o.bindRefresh(qRefresh, qhkRefresh, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDate binds and validates parameter Date from query.
func (o *GetCabsPickupsCountParams) bindDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("date", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("date", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("date", "query", "strfmt.Date", raw)
	}
	o.Date = *(value.(*strfmt.Date))

	if err := o.validateDate(formats); err != nil {
		return err
	}

	return nil
}

// validateDate carries on validations for parameter Date
func (o *GetCabsPickupsCountParams) validateDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("date", "query", "date", o.Date.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindMedallions binds and validates array parameter Medallions from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetCabsPickupsCountParams) bindMedallions(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("medallions", "query")
	}

	var qvMedallions string
	if len(rawData) > 0 {
		qvMedallions = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	medallionsIC := swag.SplitByFormat(qvMedallions, "")

	if len(medallionsIC) == 0 {
		return errors.Required("medallions", "query")
	}

	var medallionsIR []string
	for _, medallionsIV := range medallionsIC {
		medallionsI := medallionsIV

		medallionsIR = append(medallionsIR, medallionsI)
	}

	o.Medallions = medallionsIR

	return nil
}

// bindRefresh binds and validates parameter Refresh from query.
func (o *GetCabsPickupsCountParams) bindRefresh(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetCabsPickupsCountParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("refresh", "query", "bool", raw)
	}
	o.Refresh = &value

	return nil
}
